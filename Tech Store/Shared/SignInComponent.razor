@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService
@inject NavigationManager NavManager
@inject HttpClient Http

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Email" Class="mt-3"
                              @bind-Value="model.Email" For="@(() => model.Email)"/>
                <MudTextField Label="Password"  Class="mt-3"
                              @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Log In</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    if (SignIn()){

                        <MudText Color="Color.Success">User Signed</MudText>
                        @*NavManager.NavigateTo("/");*@

                    }else{
                        <MudText Color="Color.Error">Email / password incorrect</MudText>
                    }
                }
                else
                {
                        <MudText Color="@Color.Error">
                            <ValidationSummary />
                        </MudText>
                }
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudText Typo="Typo.body2" Align="Align.Center">
            Don´t have an account <MudLink @onclick="OpenDialog">Register</MudLink>
        </MudText>
    </MudItem>
</MudGrid>
</EditForm>


@code {
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;
    public  List<User> list = new List<User>();
    public User[]? user;

    public class RegisterAccountForm
    {

        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string? Password { get; set; }

    }

    private void OnValidSubmit(EditContext context)
    {

        success = true;
        StateHasChanged();
    }

    private void OpenDialog(){
        var options = new DialogOptions { CloseOnEscapeKey = true, };
        DialogService.Show<RegisterDialogComponent>("",options);
    }
    protected override async Task OnInitializedAsync(){
        user = await Http.GetFromJsonAsync<User[]>("data/User/User.json");

        list = user.ToList();
    }
    //public async Task ReadJSON()
    //{

    //    user = await Http.GetFromJsonAsync<User[]>("data/User/User.json");

    //    Console.WriteLine(user.ToList());
    //    list = user.ToList();
    //}

    private bool SignIn(){

        foreach(User user in list){
            if(model.Email == user.email && model.Password == user.password){
                
                NavMenu.user = false;
                NavMenu.guest = true;
                NavMenu.letter = user.name.Substring(0, 1).ToUpper();
                

                return true;
            }
        }
        return false;
    }


    public class User{
        public string? name { get; set; }
        public string? email { get; set; }
        public string? password { get; set; }
    }

}
